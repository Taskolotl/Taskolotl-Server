(()=>{"use strict";class e{constructor(e,t,o,a){console.log("CREATED TASK LIST 2!"),this.taskData=e,this.rootElement=document.createElement("div"),this.rootElement.classList.add("container","taskListContainer"),this.summaryElement=this.createSummaryRow(t,o,a),this.rootElement.appendChild(this.summaryElement),e.forEach((e=>{this.createCategoryTitle(e.categoryName),console.log(e.score+", "+e.average+", "+e.previousAverage),this.createCategorySummaryRow(e.score,e.average,e.previousAverage),e.taskData.forEach((e=>{this.createRow(e[0],e[1])}))})),document.body.appendChild(this.rootElement)}createCategorySummaryRow(e,t,o){const a="Score: "+Number(e.toFixed(2))+", AVG: "+Number(t.toFixed(2))+", PV-AVG: "+Number(o.toFixed(2));console.log(a);const r=document.createElement("div");r.classList.add("row");const s=document.createElement("div");s.classList.add("col"),s.innerText=a,r.appendChild(s),this.rootElement.appendChild(r)}createSummaryRow(e,t,o){const a="Score: "+Number(e.toFixed(2))+", AVG: "+Number(t.toFixed(2))+", PV-AVG: "+Number(o.toFixed(2));console.log(a);const r=document.createElement("div");r.classList.add("row");const s=document.createElement("div");return s.classList.add("col"),s.innerText=a,r.appendChild(s),r}createCategoryTitle(e){const t=document.createElement("div");t.classList.add("row");const o=document.createElement("div");o.classList.add("col","categoryTitleFont"),o.innerText=e,t.appendChild(o),this.rootElement.appendChild(t)}createRow(e,t){const o=document.createElement("div");o.classList.add("row");const a=document.createElement("div");a.classList.add("col");const r=document.createElement("div");r.classList.add("form-check");const s=document.createElement("input");s.classList.add("form-check-input","checkboxSize"),s.type="checkbox",s.value="",s.checked=t,s.id=e;const c=document.createElement("label");c.classList.add("form-check-label","formCheckLabel"),c.setAttribute("for",e),c.innerText=e,r.appendChild(s),r.appendChild(c),a.appendChild(r),o.appendChild(a),this.rootElement.appendChild(o),s.addEventListener("change",(()=>{this.taskData.forEach((t=>{t.taskData.forEach((t=>{t[0]===e&&(t[1]=s.checked)}))})),this.logRows(),this.sendDataToServer()}))}logRows(){console.log("Current Task List:"),this.taskData.forEach((e=>{console.log(`Category: ${e.categoryName}`),e.taskData.forEach((e=>{const[t,o]=e;console.log(`Task: ${t}, Completed: ${o}`)}))}))}sendDataToServer(){const e=JSON.stringify(this.taskData);console.log("Sending taskData:",e),fetch("/api/taskdata",{method:"POST",headers:{"Content-Type":"application/json"},body:e}).then((e=>{if(!e.ok)throw new Error("Failed to send data to server");console.log("Data sent to server successfully"),this.getUpdatedScores()})).catch((e=>{console.error("Error sending data to server:",e)}))}async sendGetRequest(){try{const e=await fetch("http://localhost:3000/api/data",{method:"GET",headers:{"Content-Type":"application/json"}});if(e.ok)return await e.json();throw new Error("Request failed.")}catch(e){throw console.error(e),e}}getUpdatedScores(){this.sendGetRequest().then((e=>{this.rootElement.removeChild(this.summaryElement),document.body.removeChild(this.rootElement),this.taskData=e.categoryData,this.rootElement=document.createElement("div"),this.rootElement.classList.add("container","taskListContainer"),this.summaryElement=this.createSummaryRow(e.scoringData.score,e.scoringData.average,e.scoringData.previousAverage),this.rootElement.appendChild(this.summaryElement),e.categoryData.forEach((e=>{this.createCategoryTitle(e.categoryName),this.createCategorySummaryRow(e.score,e.average,e.previousAverage),e.taskData.forEach((e=>{this.createRow(e[0],e[1])}))})),document.body.appendChild(this.rootElement)})).catch((e=>{console.error(e)}))}}(async function(){try{const e=await fetch("http://localhost:3000/api/data",{method:"GET",headers:{"Content-Type":"application/json"}});if(e.ok)return await e.json();throw new Error("Request failed.")}catch(e){throw console.error(e),e}})().then((t=>{console.log("SCORE: "+t.scoringData.score),console.log("AVERAGE: "+t.scoringData.average),console.log("PREV AVERAGE: "+t.scoringData.previousAverage),new e(t.categoryData,t.scoringData.score,t.scoringData.average,t.scoringData.previousAverage),console.log(t)})).catch((e=>{console.error(e)}))})();