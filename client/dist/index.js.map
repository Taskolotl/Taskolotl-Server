{"version":3,"sources":["TaskList.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import { TaskCategory } from \"./TaskCategory\";\r\n\r\ninterface GlobalScoringData {\r\n  score: number;\r\n  average: number;\r\n  previousAverage: number;\r\n}\r\n\r\ninterface CategoryData {\r\n  score: number;\r\n  average: number;\r\n  previousAverage: number;\r\n  categoryName: string;\r\n  taskData: [string, boolean][];\r\n}\r\n\r\ninterface ApiResponse {\r\n  scoringData: GlobalScoringData\r\n  categoryData: CategoryData[];\r\n}\r\n\r\nexport class TaskList {\r\n    private rootElement: HTMLElement;\r\n    private summaryElement: HTMLElement;\r\n    private taskData: TaskCategory[];\r\n\r\n    constructor(taskDatas: TaskCategory[], score: number, average: number, previousAverage: number) {\r\n        console.log(\"CREATED TASK LIST 2!\");\r\n\r\n        // Store task data\r\n        this.taskData = taskDatas;\r\n\r\n        //Create root element\r\n        this.rootElement = document.createElement('div');\r\n        this.rootElement.classList.add('container', 'taskListContainer');\r\n\r\n        this.summaryElement = this.createSummaryRow(score, average, previousAverage);\r\n        this.rootElement.appendChild(this.summaryElement);\r\n\r\n        //Create rows\r\n        taskDatas.forEach((taskData : TaskCategory) => {\r\n            this.createCategoryTitle(taskData.categoryName);\r\n            console.log(taskData.score + \", \" + taskData.average + \", \" + taskData.previousAverage);\r\n\r\n            this.createCategorySummaryRow(taskData.score, taskData.average, taskData.previousAverage);\r\n\r\n            taskData.taskData.forEach((taskEntry : [string, boolean]) => {\r\n                this.createRow(taskEntry[0], taskEntry[1]);\r\n            });\r\n        });\r\n\r\n        document.body.appendChild(this.rootElement);\r\n    }\r\n\r\n    private createCategorySummaryRow(score: number, average: number, previousAverage: number): void {\r\n        const summaryLabel : string = \"Score: \" + Number(score.toFixed(2)) + \", AVG: \" + Number(average.toFixed(2)) + \", PV-AVG: \" + Number(previousAverage.toFixed(2));\r\n        console.log(summaryLabel); \r\n\r\n        const rowElement = document.createElement('div');\r\n        rowElement.classList.add('row');\r\n\r\n        const colElement = document.createElement('div');\r\n        colElement.classList.add('col');\r\n        colElement.innerText = summaryLabel;\r\n\r\n        rowElement.appendChild(colElement);\r\n\r\n        this.rootElement.appendChild(rowElement);\r\n    }\r\n\r\n    private createSummaryRow(score: number, average: number, previousAverage: number): HTMLElement {\r\n        const summaryLabel : string = \"Score: \" + Number(score.toFixed(2)) + \", AVG: \" + Number(average.toFixed(2)) + \", PV-AVG: \" + Number(previousAverage.toFixed(2));\r\n        console.log(summaryLabel); \r\n\r\n        const rowElement = document.createElement('div');\r\n        rowElement.classList.add('row');\r\n\r\n        const colElement = document.createElement('div');\r\n        colElement.classList.add('col');\r\n        colElement.innerText = summaryLabel;\r\n\r\n        rowElement.appendChild(colElement);\r\n\r\n        return rowElement;\r\n    }\r\n\r\n    private createCategoryTitle(categoryName : string) {\r\n        const rowElement = document.createElement('div');\r\n        rowElement.classList.add('row');\r\n\r\n        const colElement = document.createElement('div');\r\n        colElement.classList.add('col', 'categoryTitleFont');\r\n        colElement.innerText = categoryName;\r\n\r\n        rowElement.appendChild(colElement);\r\n        this.rootElement.appendChild(rowElement);\r\n    }\r\n\r\n    private createRow(taskTitle: string, isTaskComplete: boolean) {\r\n        const rowElement = document.createElement('div');\r\n        rowElement.classList.add('row');\r\n\r\n        const checkboxColumnElement = document.createElement('div');\r\n        checkboxColumnElement.classList.add('col');\r\n\r\n        const checkboxDiv = document.createElement('div');\r\n        checkboxDiv.classList.add('form-check');\r\n\r\n        const formCheckInput = document.createElement('input');\r\n        formCheckInput.classList.add('form-check-input', 'checkboxSize');\r\n        formCheckInput.type = \"checkbox\";\r\n        formCheckInput.value = \"\";\r\n        formCheckInput.checked = isTaskComplete;\r\n        formCheckInput.id = taskTitle;\r\n\r\n        const labelElement = document.createElement('label');\r\n        labelElement.classList.add('form-check-label', 'formCheckLabel');\r\n        labelElement.setAttribute('for', taskTitle);\r\n        labelElement.innerText = taskTitle;\r\n\r\n        checkboxDiv.appendChild(formCheckInput);\r\n        checkboxDiv.appendChild(labelElement);\r\n        checkboxColumnElement.appendChild(checkboxDiv);\r\n        rowElement.appendChild(checkboxColumnElement);\r\n        this.rootElement.appendChild(rowElement);\r\n\r\n        // Add event listener to the checkbox\r\n        formCheckInput.addEventListener('change', () => {\r\n            this.taskData.forEach((taskData: TaskCategory) => {\r\n                taskData.taskData.forEach((taskEntry: [string, boolean]) => {\r\n                    if (taskEntry[0] === taskTitle) {\r\n                        taskEntry[1] = formCheckInput.checked;\r\n                    }\r\n                  });\r\n              });\r\n            this.logRows();\r\n            this.sendDataToServer();\r\n        });\r\n    }\r\n\r\n    private logRows() {\r\n        console.log('Current Task List:');\r\n        this.taskData.forEach((taskData: TaskCategory) => {\r\n          console.log(`Category: ${taskData.categoryName}`);\r\n          taskData.taskData.forEach((taskEntry: [string, boolean]) => {\r\n            const [taskTitle, isTaskComplete] = taskEntry;\r\n            console.log(`Task: ${taskTitle}, Completed: ${isTaskComplete}`);\r\n          });\r\n        });\r\n      }\r\n\r\n      private sendDataToServer(): void {\r\n        const url = '/api/taskdata';\r\n        const requestData = JSON.stringify(this.taskData);\r\n      \r\n        console.log('Sending taskData:', requestData);\r\n\r\n\r\n        fetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: requestData,\r\n        })\r\n          .then((response) => {\r\n            if (!response.ok) {\r\n              throw new Error('Failed to send data to server');\r\n            }\r\n            console.log('Data sent to server successfully');\r\n\r\n            //get new scores\r\n            this.getUpdatedScores();\r\n\r\n          })\r\n          .catch((error) => {\r\n            console.error('Error sending data to server:', error);\r\n          });\r\n      }\r\n\r\n\r\n      private async sendGetRequest(): Promise<ApiResponse> {\r\n        const url = 'http://localhost:3000/api/data'; // Replace with your server URL\r\n      \r\n        try {\r\n          const response = await fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          });\r\n      \r\n          if (response.ok) {\r\n            const responseData: ApiResponse = await response.json();\r\n            return responseData;\r\n          } else {\r\n            throw new Error('Request failed.'); // Handle errors\r\n          }\r\n        } catch (error) {\r\n          // Handle network errors and other errors\r\n          console.error(error);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      private getUpdatedScores(): void {\r\n        this.sendGetRequest()\r\n        .then((responseData: ApiResponse) => {\r\n            \r\n            this.rootElement.removeChild(this.summaryElement);\r\n            document.body.removeChild(this.rootElement);\r\n            // Store task data\r\n            this.taskData = responseData.categoryData;\r\n\r\n            //Create root element\r\n            this.rootElement = document.createElement('div');\r\n            this.rootElement.classList.add('container', 'taskListContainer');\r\n\r\n            this.summaryElement = this.createSummaryRow(responseData.scoringData.score, responseData.scoringData.average, responseData.scoringData.previousAverage);\r\n            this.rootElement.appendChild(this.summaryElement);\r\n\r\n            //Create rows\r\n            responseData.categoryData.forEach((taskData : TaskCategory) => {\r\n                this.createCategoryTitle(taskData.categoryName);\r\n\r\n                this.createCategorySummaryRow(taskData.score, taskData.average, taskData.previousAverage);\r\n\r\n                taskData.taskData.forEach((taskEntry : [string, boolean]) => {\r\n                    this.createRow(taskEntry[0], taskEntry[1]);\r\n                });\r\n            });\r\n\r\n            document.body.appendChild(this.rootElement);\r\n        })\r\n        .catch((error) => {\r\n          // Handle errors\r\n          console.error(error);\r\n        });\r\n      }\r\n}","import {TaskList} from './TaskList'\r\nimport { TaskCategory } from './TaskCategory';\r\nimport { response } from 'express';\r\n\r\nconsole.log(\"222\");\r\n\r\ninterface GlobalScoringData {\r\n  score: number;\r\n  average: number;\r\n  previousAverage: number;\r\n}\r\n\r\ninterface CategoryData {\r\n  score: number;\r\n  average: number;\r\n  previousAverage: number;\r\n  categoryName: string;\r\n  taskData: [string, boolean][];\r\n}\r\n\r\ninterface ApiResponse {\r\n  scoringData: GlobalScoringData\r\n  categoryData: CategoryData[];\r\n}\r\n\r\n  async function sendGetRequest(): Promise<ApiResponse> {\r\n    const url = 'http://localhost:3000/api/data'; // Replace with your server URL\r\n  \r\n    try {\r\n      const response = await fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const responseData: ApiResponse = await response.json();\r\n        return responseData;\r\n      } else {\r\n        throw new Error('Request failed.'); // Handle errors\r\n      }\r\n    } catch (error) {\r\n      // Handle network errors and other errors\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n\r\n\r\nsendGetRequest()\r\n  .then((responseData: ApiResponse) => {\r\n    // Handle the response data\r\n    console.log(\"SCORE: \" + responseData.scoringData.score);\r\n    console.log(\"AVERAGE: \" + responseData.scoringData.average);\r\n    console.log(\"PREV AVERAGE: \" + responseData.scoringData.previousAverage);\r\n    const myTaskList = new TaskList(responseData.categoryData, responseData.scoringData.score, responseData.scoringData.average, responseData.scoringData.previousAverage);\r\n    console.log(responseData);\r\n  })\r\n  .catch((error) => {\r\n    // Handle errors\r\n    console.error(error);\r\n  });"]}